library(magrittr)  # package for concatenating commands %>%
library(tibble)    # set data as tibble object
library(dplyr)     # data management (filter,select,summarize,ecc...)
library(lubridate) # manipulating dates
library(tidyr)
library(pander)
library(readr)
library(ggplot2)
library(plotly)
library(fmsb)
install.packages("fmsb")
library(magrittr)  # package for concatenating commands %>%
library(tibble)    # set data as tibble object
library(dplyr)     # data management (filter,select,summarize,ecc...)
library(lubridate) # manipulating dates
library(tidyr)
library(pander)
library(readr)
library(ggplot2)
library(plotly)
library(fmsb)
#**********************#
# Fetch dati           #
#**********************#
wd <- paste(dirname(rstudioapi::getActiveDocumentContext()$path), "data", sep = .Platform$file.sep)
setwd(wd)
file_path = "deaths.lombardy.csv"
dt_deaths = read_csv(file_path,
col_types = cols( .default = col_character(), MORTI = col_integer()),
locale = readr::locale(encoding = "latin1"))
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(tibble)
library(pander)
library(readr)
setwd("C:\\Users\\Laura\\Desktop\\Covid19_prediction\\data")
pop<-read.csv("Popolazione_comuni_italiani.csv")
ANPR<-read.csv("Tabella_45 Comuni subentrati.csv", sep=";")
td<-read.csv("comune_giorno.csv")
tda<-read.csv("comuni_giornaliero.csv")
#sistemo il dataset in modo che i dati siano ben organizzati
pop %>%  rename( COD_PROVCOM = ï..ITTER107, ABITANTI = Value )%>%
filter(Sesso=="totale")%>%
select(-c(Territorio:Seleziona.periodo ,Flag.Codes,Flags))%>%
mutate(COD_PROVCOM=as.character(COD_PROVCOM))%>%
mutate(COD_PROVCOM=as.numeric(COD_PROVCOM))->pop
pop <- na.omit(pop)
#ci sono alcune righe che non rappresentano comuni ma regioni e aree geografiche, quindi le tolgo.
#Sistemo il dataframe in modo che sia più funzionale, come abbiamo fatto a lezione
td %>% gather(key="SESSO_ANNO", value="DECESSI", MASCHI_15:TOTALE_20)%>%
separate(SESSO_ANNO, c("SESSO", "ANNO"), "_")%>%
mutate(DATA = as.Date(paste0("0", GE, "2020"), format = "%m%d%Y")) -> td
#Faccio una join con pop così aggiungo la colonna con il numero di abitanti per comune
td<-left_join(td, pop, by="COD_PROVCOM")
#Escono dei NAN che sono dovuti al fatto che i due diversi dataframe sono aggiornati a date diverse;
#pop è aggornato al 01/01/2019, td al 04/04/2020. In questo lasso di
#tempo alcuni comuni si sono fusi tra di loro, ne sono nati altri...
td <- na.omit(td)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(tibble)
library(pander)
library(readr)
setwd("C:\\Users\\Laura\\Desktop\\Covid19_prediction\\data")
pop<-read.csv("Popolazione_comuni_italiani.csv")
ANPR<-read.csv("Tabella_45 Comuni subentrati.csv", sep=";")
td<-read.csv("comune_giorno.csv")
tda<-read.csv("comuni_giornaliero.csv")
#sistemo il dataset in modo che i dati siano ben organizzati
pop %>%  rename( COD_PROVCOM = ï..ITTER107, ABITANTI = Value )%>%
filter(Sesso=="totale")%>%
select(-c(Territorio:Seleziona.periodo ,Flag.Codes,Flags))%>%
mutate(COD_PROVCOM=as.character(COD_PROVCOM))%>%
mutate(COD_PROVCOM=as.numeric(COD_PROVCOM))->pop
pop <- na.omit(pop)
#ci sono alcune righe che non rappresentano comuni ma regioni e aree geografiche, quindi le tolgo.
#Sistemo il dataframe in modo che sia più funzionale, come abbiamo fatto a lezione
td %>% gather(key="SESSO_ANNO", value="DECESSI", MASCHI_15:TOTALE_20)%>%
separate(SESSO_ANNO, c("SESSO", "ANNO"), "_")%>%
mutate(DATA = as.Date(paste0("0", GE, "2020"), format = "%m%d%Y")) -> td
#Faccio una join con pop così aggiungo la colonna con il numero di abitanti per comune
td<-left_join(td, pop, by="COD_PROVCOM")
#Escono dei NAN che sono dovuti al fatto che i due diversi dataframe sono aggiornati a date diverse;
#pop è aggornato al 01/01/2019, td al 04/04/2020. In questo lasso di
#tempo alcuni comuni si sono fusi tra di loro, ne sono nati altri...
td <- na.omit(td)
#non ci sono valori non disponibili nei mesi gennaio-marzo per i comuni di cui abbiamo i dati del 2020
td %>%   filter(DATA_INIZIO_DIFF!="Dati 2020 n.d.", format(as.Date(DATA), "%m")!="04", DECESSI==9999)%>%
count()->valnondisp
as.numeric(valnondisp)
levels(td$DATA_INIZIO_DIFF)
td %>% select(-c(NOME_PROVINCIA,REG, PROV, CL_ETA,GE))%>%
filter(SESSO=="TOTALE", DECESSI<9999, format(as.Date(DATA), "%m")!="04" )%>%
group_by(ANNO, NOME_REGIONE, COD_PROVCOM, DATA_INIZIO_DIFF, ABITANTI, DATA)%>%
summarise(DECESSI=sum(DECESSI))->tdp
ANPR %>% mutate(DATASUBENTRO=as.character(ANPR$DATASUBENTRO))%>%
mutate(DATASUBENTRO=as.Date.character(ANPR$DATASUBENTRO,"%d/%m/%Y"))%>%
mutate(diffDate=as.numeric(as.Date("2019-12-31")-ANPR$DATASUBENTRO))->ANPR
#considero solo i comuni che fanno parte dei comuni in ANPR in data 31/12/2019 perchè Istat afferma di considerare solo questi comuni.
ANPR %>% select(CODISTAT, DATASUBENTRO, diffDate)%>%
filter(diffDate>0)%>%
select(-c(diffDate,DATASUBENTRO))%>%
rename(COD_PROVCOM=CODISTAT)->ANPR
#dataframe con abitanti per comune, COD_PROVCOM e relativa regione di appartenenza
td %>% distinct(NOME_REGIONE,COD_PROVCOM, ABITANTI)%>%
group_by(COD_PROVCOM, ABITANTI)->AbitantiPerComune
left_join(ANPR, AbitantiPerComune, by="COD_PROVCOM")->ANPR
#Non ho la regione di tutti i comuni perchè i dataframe non sono aggiornati alla stessa data. Considero quindi questi comuni come se non rientrassero in ANPR
ANPR <- na.omit(ANPR)
#popolazione per regione coperta dall'ANPR
ANPR %>% group_by(NOME_REGIONE)%>%
summarise(abitantiANPR=sum(ABITANTI))->ANPR
#abitanti per regione che rientrano nei comuni in ANPR
td %>% distinct(NOME_REGIONE, COD_PROVCOM, ABITANTI)%>%
group_by(NOME_REGIONE)%>%
summarise(abitanti=sum(ABITANTI))->AbitantiPerRegione
inner_join(AbitantiPerRegione, ANPR, by="NOME_REGIONE")->ANPR
#abitanti per regione che rientrano nei comuni considerati dall'Istat
td %>% filter(DATA_INIZIO_DIFF!="Dati 2020 n.d." )%>%
distinct(COD_PROVCOM, NOME_REGIONE, ABITANTI)%>%
group_by(NOME_REGIONE)%>%
summarise(abitantiCampionati=sum(ABITANTI))->AbitantiPerRegioneCampionati
inner_join( ANPR, AbitantiPerRegioneCampionati, by="NOME_REGIONE")->TOT
#dataframe riassuntivo che compara le varie percentuali per regione
TOT %>% mutate(percANPR=abitantiANPR/abitanti*100,percCAMPIONATI=abitantiCampionati/abitanti*100)->TOT
TOT
tdp %>% filter(NOME_REGIONE=="Lombardia")->tdpl
TOT %>%  filter(NOME_REGIONE=="Lombardia")->Lombardia
tdp%>%  filter(DATA_INIZIO_DIFF!="Dati 2020 n.d.",format(as.Date(DATA), "%m")!="03",as.Date(DATA)!=as.Date("2020-02-29"))%>%
group_by(DATA, ANNO) %>%
summarise(DECESSI = sum(DECESSI))%>%
arrange(ANNO, DATA) %>%
ungroup()->tdpg
View(tdp)
View(tdp)
tdpg %>% ggplot(aes(x = DATA, y = DECESSI, color = ANNO)) + geom_line()
tdpl %>% filter(DATA_INIZIO_DIFF!="Dati 2020 n.d.")%>%
group_by(ANNO)%>%
summarise(DECESSIperanno=sum(DECESSI))->tdplc
#morti per COVID-19 nei comuni campionati dall'Istat
mortiLombardiaCampionata<-tdplc$DECESSIperanno[6]-tdplc$DECESSIperanno[2]
#limite superiore dei morti per COVID-19 nei comuni non campionati dall'Istat
mortiLombardiaNonCampionatasup<-mortiLombardiaCampionata/Lombardia$abitantiCampionati*(Lombardia$abitantiANPR-Lombardia$abitantiCampionati)
#limite superiore e inferiore dei morti per COVID-19 nei comuni non in ANPR (pari a popolazione non in ANPR * mortalità COVID-19 nei comuni campionati dall'Istat)
mortiLombardiaNonANPRinf<-(Lombardia$abitanti-Lombardia$abitantiANPR)*((mortiLombardiaCampionata)/Lombardia$abitantiANPR)
mortiLombardiaNonANPRsup<-(Lombardia$abitanti-Lombardia$abitantiANPR)*((mortiLombardiaCampionata+mortiLombardiaNonCampionatasup)/Lombardia$abitantiANPR)
#limite superiore e inferiore dei morti totali COVID-19
mortiCOVIDinf<-mortiLombardiaCampionata+mortiLombardiaNonANPRinf
mortiCOVIDsup<-mortiLombardiaCampionata+mortiLombardiaNonCampionatasup+mortiLombardiaNonANPRsup
print(c(mortiCOVIDinf, mortiCOVIDsup))
tda %>% gather(key="SESSO_ANNO", value="DECESSI", M_15:T_20)%>%
separate(SESSO_ANNO, c("SESSO", "ANNO"), "_")%>%
mutate(DATA=as.Date(paste0("0", GE, "2020"), format="%m%d%Y"))%>%
mutate(DECESSI=as.numeric(DECESSI))->tda
tda<-left_join(tda, pop, by="COD_PROVCOM")
tda <- na.omit(tda)
tda %>% select(-c(NOME_PROVINCIA,REG, PROV, CL_ETA,GE))%>%
filter(SESSO=="T", DECESSI<9999, format(as.Date(DATA), "%m")!="04" )%>%
group_by(ANNO, NOME_REGIONE, NOME_COMUNE, COD_PROVCOM, TIPO_COMUNE, ABITANTI)%>%
summarise(DECESSI=sum(DECESSI))->tdap
#abitanti per regione
tda%>% distinct(NOME_REGIONE, COD_PROVCOM, ABITANTI)%>%
group_by(NOME_REGIONE)%>%
summarise(abitanti=sum(ABITANTI))->AbitantiPerRegione
#abitanti per regione dei comuni considerati dall'Istat
tda%>% filter(TIPO_COMUNE!="3" )%>%
distinct(NOME_COMUNE, NOME_REGIONE, ABITANTI)%>%
group_by(NOME_REGIONE)%>%
summarise(abitantiCampionati=sum(ABITANTI))->AbitantiPerRegioneCampionati
inner_join( AbitantiPerRegione, AbitantiPerRegioneCampionati, by="NOME_REGIONE")->TOT
#dataframe riassuntivo che compara le varie percentuali
TOT %>% mutate(percCAMPIONATI=abitantiCampionati/abitanti*100)->TOT
TOT
#ANALIZZO I MORTI della Lombardia
tdap %>% filter(NOME_REGIONE=="Lombardia")->tdapl
TOT %>%  filter(NOME_REGIONE=="Lombardia")->Lombardia
#morti per covid nei comuni campionati dall'Istat
tdapl %>% filter(TIPO_COMUNE!="3")%>%
group_by(ANNO)%>%
summarise(DECESSIperanno=sum(DECESSI))->tdaplc
#morti per COVID-19 nei comuni non campionati dall'Istat
tdaplc$DECESSIperanno[6]-tdaplc$DECESSIperanno[2]->mortiLombardiaCampionata
#percentuale di morti COVID-19 sulla popolazione campionata dall'Istat
mortalitàLombardiaCampionata<-as.vector(mortiLombardiaCampionata/Lombardia$abitantiCampionati)
#morti per COVID-19 nei comuni non campionati
mortiLombardiaCampionata/Lombardia$abitantiCampionati*(Lombardia$abitanti-Lombardia$abitantiCampionati)->mortiLombardiaNonCampionatasup
mortiCOVIDinf<-mortiLombardiaCampionata
mortiCOVIDsup<-mortiLombardiaCampionata+mortiLombardiaNonCampionatasup
print(c(mortiCOVIDinf, mortiCOVIDsup))
tdp %>% filter(DATA_INIZIO_DIFF!="Dati 2020 n.d.",NOME_REGIONE == "Lombardia",as.Date(DATA)!=as.Date("2020-02-29"))%>%
group_by(DATA, ANNO, NOME_PROVINCIA) %>%
summarise(DECESSI = sum(DECESSI)) %>%
arrange(ANNO, DATA) %>%
ungroup() -> tdpp
glimpse(tdpp)
td %>% select(-c(NOME_PROVINCIA,REG, PROV, CL_ETA,GE))%>%
filter(SESSO=="TOTALE", DECESSI<9999, format(as.Date(DATA), "%m")!="04" )%>%
group_by(ANNO, NOME_REGIONE, COD_PROVCOM, NOME_PROVINCIA, DATA_INIZIO_DIFF, ABITANTI, DATA)%>%
summarise(DECESSI=sum(DECESSI))->tdp
class(td)
str(td)
td %>% select(-c(REG, PROV, CL_ETA,GE))%>%
filter(SESSO=="TOTALE", DECESSI<9999, format(as.Date(DATA), "%m")!="04" )%>%
group_by(ANNO, NOME_REGIONE, COD_PROVCOM, NOME_PROVINCIA, DATA_INIZIO_DIFF, ABITANTI, DATA)%>%
summarise(DECESSI=sum(DECESSI))->tdp
class(tdp)
str(tdp)
tdp %>% filter(DATA_INIZIO_DIFF!="Dati 2020 n.d.",NOME_REGIONE == "Lombardia",as.Date(DATA)!=as.Date("2020-02-29"))%>%
group_by(DATA, ANNO, NOME_PROVINCIA) %>%
summarise(DECESSI = sum(DECESSI)) %>%
arrange(ANNO, DATA) %>%
ungroup() -> tdpp
glimpse(tdpp)
tdpp %>% ggplot(aes(x = DATA, y = DECESSI, color = ANNO)) +  geom_line() +
facet_wrap(~NOME_PROVINCIA)
tdpp %>% group_by(DATA, ANNO) %>%
summarise(DECESSI = sum(DECESSI)) %>%
ggplot(aes(x = DATA, y = DECESSI, color = ANNO)) +geom_line()
